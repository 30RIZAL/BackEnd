{"version":3,"sources":["../../server/helper/UpDonwloadHelper.js"],"names":["uploadDir","process","cwd","uploadSingleFile","req","options","multiples","keepExtensions","maxFileSize","form","result","Promise","resolve","reject","onPart","part","filename","match","handlePart","_error","Error","parse","error","fields","files","status","message","uploadFile","length","path","seq","sep","fileName","substr","lastIndexOf","replace","attrb","file","uploadMultipleFile","listOfFiles","fileAttr","prim_id","prim_filename","prim_filesize","prim_filetype","prim_url","prim_primary","forEach","v","substring","size","type","env","URL_IMAGE","showProductImage","res","params","url","UPLOAD_DIR","fs","createReadStream","on","responseNotFound","pipe","writeHead","end"],"mappings":"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","sourcesContent":["import path from 'path';\nimport formidable from 'formidable';\nimport fs from 'fs';\n\nconst uploadDir = process.cwd() + '/storages/';\n\nconst uploadSingleFile = async (req) => {\n    const options = {\n        multiples: false,\n        keepExtensions: true,\n        uploadDir: uploadDir,\n        maxFileSize: 50 * 1024 * 1024, // 5MB\n    }\n    const form = formidable(options);\n\n    const result = new Promise((resolve, reject) => {\n        //config option for formidale\n\n        // onpart untuk override stream sebelum di write ke folder\n        form.onPart = function (part) {\n\n            if (!part.filename || part.filename.match(/\\.(jpg|jpeg|png)$/i)) {\n                this.handlePart(part);\n            }\n            else {\n                form._error(new Error('File type is not supported'));\n            }\n        }\n\n\n        form.parse(req, (error, fields, files) => {\n            if (error) {\n                return reject({\n                    status: \"error\",\n                    message: `${error}`\n\n                });\n            }\n\n            if (files.uploadFile.length > 1) {\n\n                return reject({\n                    status: \"error\",\n                    message: \"only one file allowed\"\n                });\n            }\n\n            const uploadFile = files.uploadFile.path;\n\n            const seq = path.sep;\n            const fileName = uploadFile.substr(uploadFile.lastIndexOf(seq), uploadFile.length).replace(seq, \"\");\n\n            return resolve({\n                attrb: {\n                    file: files.uploadFile,\n                    fields: fields,\n                    filename: fileName\n                },\n                status: {\n                    status: \"succeed\",\n                    message: \"\"\n                }\n            })\n        })\n    });\n    return result;\n}\n\nconst uploadMultipleFile = async (req) => {\n    const options = {\n        multiples: true,\n        keepExtensions: true,\n        uploadDir: uploadDir,\n        maxFileSize: 50 * 1024 * 1024, // 5MB\n    }\n    const form = formidable(options);\n\n    const result = new Promise((resolve, reject) => {\n        //config option for formidale\n\n        // onpart untuk override stream sebelum di write ke folder\n        form.onPart = function (part) {\n\n            if (!part.filename || part.filename.match(/\\.(jpg|jpeg|png)$/i)) {\n                this.handlePart(part);\n            }\n            else {\n                form._error(new Error('File type is not supported'));\n            }\n        }\n\n        form.parse(req, (error, fields, files) => {\n            if (error) {\n                return reject({\n                    status: \"error\",\n                    message: `${error}`\n\n                });\n            }\n\n            let listOfFiles = []\n\n            if (files) {\n                let fileAttr = {\n                    prim_id : 0,\n                    prim_filename: \"\",\n                    prim_filesize: 0,\n                    prim_filetype: \"\",\n                    prim_url: \"\",\n                    prim_primary: false\n                }\n\n\n                const seq = path.sep;\n                let uploadFile = \"\"\n                let fileName = \"\";\n\n                files.uploadFile.forEach((v) => {\n                    uploadFile = v.path;\n                    fileName = uploadFile.substring(uploadFile.lastIndexOf(seq), uploadFile.length).replace(seq, \"\");\n\n                    fileAttr = {\n                        prim_id : 0,\n                        prim_filename: fileName,\n                        prim_filesize: v.size,\n                        prim_filetype: v.type,\n                        prim_url: process.env.URL_IMAGE + fileName,\n                        prim_primary: false\n                    }\n\n                    listOfFiles = [...listOfFiles, fileAttr]\n\n                })\n            }\n\n\n            return resolve({\n                files: listOfFiles,\n                fields: fields\n                ,\n                status: {\n                    status: \"succeed\",\n                    message: \"\"\n                }\n            })\n\n\n        })\n    });\n    return result;\n}\n\nconst showProductImage = async (req, res) => {\n    const filename = req.params.filename;\n    const url = `${process.cwd()}/${process.env.UPLOAD_DIR}/${filename}`;\n    fs.createReadStream(url)\n        .on(\"error\", () => responseNotFound(req, res))\n        .pipe(res);\n}\n\n\nfunction responseNotFound(req, res) {\n    res.writeHead(404, { \"Content-Type\": \"text/plain\" });\n    res.end(\"Not Found\")\n}\n\n\nexport default {\n    uploadSingleFile,\n    showProductImage,\n    uploadMultipleFile\n}"],"file":"UpDonwloadHelper.js"}